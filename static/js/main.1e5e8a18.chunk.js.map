{"version":3,"sources":["App.js","action/index.js","reportWebVitals.js","reducer/counter.js","reducer/isLogged.js","reducer/index.js","index.js"],"names":["App","counter","useSelector","state","isLogged","dispatch","useDispatch","onClick","type","payLoad","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","countReducer","action","loginReducer","allReducers","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"wLAoBeA,MAhBf,WACE,IAAMC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,WACrCG,EAAWF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YACtCC,EAAWC,cAEjB,OACE,gCAEE,wBAAQC,QAAS,kBAAMF,ECXnB,CACFG,KAAM,YACNC,QDSwC,KAA1C,eACA,qCAAQR,EAAR,OACA,wBAAQM,QAAS,kBAAMF,ECPnB,CACFG,KAAM,eDMR,eACA,4CAAeJ,SEHNM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCMCQ,EAbM,WAAwB,IAAtBhB,EAAqB,uDAAf,EAAGiB,EAAY,uCACxC,OAAOA,EAAOZ,MAEV,IAAK,YACD,OAAOL,EAAQiB,EAAOX,QAE1B,IAAK,YACD,OAAON,EAAQ,EAAIA,EAAQ,EAAI,EACnC,QACI,OAAOA,ICCJkB,EAVM,WAA4B,IAA1BlB,EAAyB,wDAAZiB,EAAY,uCAC5C,OAAOA,EAAOZ,MAEV,IAAK,SACD,OAAQL,EACZ,QACI,OAAOA,ICGJmB,EALKC,YAAgB,CAChCtB,QAASkB,EACTf,SAAUiB,ICGRG,EAAQC,YAAYH,EAAaI,OAAOC,8BAAgCD,OAAOC,gCA2CrFC,IAASC,OACL,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEAM,SAASC,eAAe,SAM9BrB,M","file":"static/js/main.1e5e8a18.chunk.js","sourcesContent":["import React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {increment, decrement} from './action';\n\nfunction App() {\n  const counter = useSelector(state => state.counter);\n  const isLogged = useSelector(state => state.isLogged);\n  const dispatch = useDispatch();\n  \n  return (\n    <div>\n      {/* <h1>Redux counter: {counter}</h1> */}\n      <button onClick={() => dispatch(increment(5))}>+</button>\n      <span> {counter} </span>\n      <button onClick={() => dispatch(decrement())}>-</button>\n      <h3>isLooged: {isLogged}</h3>\n    </div>\n  );\n}\n\nexport default App;\n","export const increment = (num1) => {\r\n    return{\r\n        type: \"INCREMENT\",\r\n        payLoad: num1\r\n    }\r\n}\r\nexport const decrement = () => {\r\n    return{\r\n        type: \"DECREMENT\"\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const countReducer = ( state=0, action ) => {\r\n    switch(action.type)\r\n    {\r\n        case \"INCREMENT\":\r\n            return state + action.payLoad;\r\n        \r\n        case \"DECREMENT\":\r\n            return state > 0 ? state - 1 : 0;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default countReducer;","const loginReducer = ( state=false, action ) => {\r\n    switch(action.type)\r\n    {\r\n        case \"SINGIN\":\r\n            return !state;\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport default loginReducer;","import countReducer from './counter';\r\nimport loginReducer from './isLogged';\r\nimport {combineReducers} from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n    counter: countReducer,\r\n    isLogged: loginReducer\r\n});\r\n\r\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {createStore } from 'redux';\nimport allReducers from './reducer';\nimport {Provider} from 'react-redux';\n\nconst store = createStore(allReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n// STORE => globalized state\n\n// ACTION => It describes what you are going to do? [e.g. increment, decrement]\n// const increment  = () => {\n//   return {\n//     type: \"INCREMENT\",\n//     payload: 5\n//   }\n// }\n// const decrement = () => {\n//   return {\n//     type: \"DECREMENT\",\n//   }\n// }\n\n// REDUCER => Check, which action you did and based on the action, it will modify/update to the store with the help of Dispatch\n// const reducer = (state = 0, action) => {\n//   switch(action.type)\n//   {\n//     case \"INCREMENT\":\n//       return state + action.payload;\n\n//     case \"DECREMENT\":\n//       return state - 1;\n\n//     default: \n//       return state;\n//   }\n// }\n\n// let store = createStore(reducer);\n\n// display it in the console\n// store.subscribe(() => console.log(store.getState()));\n\n// DISPATCH => Here we actually execute the action\n// store.dispatch(increment());\n// store.dispatch(increment());\n// store.dispatch(decrement());\n\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />  \n    </Provider>\n    , document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}